esphome:
  name: solar-gauge
  friendly_name: Solar gauge
  on_boot:
    - priority: -100
      then:
        - script.execute: stepper_init
  on_shutdown: 
    then:
      - script.execute: stepper_backward_full
      - script.wait: stepper_backward_full

substitutions:
  step_speed: 600 steps/s
  step_delay: 1.4s
  steps_total: "635"
  steps_gauge_max: "280"
  gauge_max: "10.0"

globals:
  - id: stepper_initialized
    type: bool
    initial_value: "false"

esp32:
  board: seeed_xiao_esp32c3
  variant: esp32c3
  framework:
    type: arduino

logger:

api:
  encryption:
    key: !secret api_key

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  ap:
    ssid: "Solar-Gauge Fallback Hotspot"
    password: !secret ap_password

captive_portal:

output:
  - platform: gpio
    id: stepper_enable
    pin: GPIO6

stepper:
  - platform: uln2003
    id: gauge_stepper
    pin_a: GPIO5
    pin_b: GPIO3
    pin_c: GPIO2
    pin_d: GPIO4
    sleep_when_done: True
    max_speed: $step_speed
    acceleration: inf
    deceleration: inf

number:
  - platform: template
    id: gauge_control
    name: Gauge Control
    min_value: 0
    max_value: 10
    step: 0.5
    optimistic: True
    set_action: 
      then:
        - script.execute: stepper_refresh

script:
  - id: stepper_forward_full
    mode: queued
    then:
      - logger.log: Stepper forward full
      - script.execute: 
          id: stepper_set
          steps: $steps_total
  - id: stepper_backward_full
    mode: queued
    then:
      - logger.log: Stepper backward full
      - script.execute: 
          id: stepper_set
          steps: 0
  - id: stepper_init
    mode: queued
    then:
      - delay: 2s
      - script.execute: stepper_forward_full
      - script.wait: stepper_forward_full
      - script.execute: stepper_backward_full
      - script.wait: stepper_backward_full
      - globals.set: 
          id: stepper_initialized
          value: "true"
      - logger.log: Stepper initialized
  - id: stepper_set
    mode: queued
    parameters:
      steps: int
    then:
      - logger.log:
          format: Stepper set %d
          args: [steps]
      - output.turn_on: stepper_enable
      - stepper.set_target:
          id: gauge_stepper
          target: !lambda return steps;
      - delay: $step_delay
      - output.turn_off: stepper_enable
  - id: stepper_refresh
    then:
      - wait_until:
          lambda: return id(stepper_initialized);
      - script.execute:
          id: stepper_set
          steps: !lambda return id(gauge_control).state / $gauge_max * $steps_gauge_max;

time:
  - platform: sntp
    on_time: 
      seconds: 30
      minutes: 0
      then:
        - script.execute: stepper_init
        - script.wait: stepper_init
        - script.execute: stepper_refresh

button:
  - platform: template
    name: Stepper forward full
    on_press:
      then:
        - script.execute: stepper_forward_full
  - platform: template
    name: Stepper backward full
    on_press:
      then:
        - script.execute: stepper_backward_full

sensor:
  - platform: homeassistant
    id: power_production
    entity_id: sensor.current_power_production_sensor_entity_id
    unit_of_measurement: kW
    device_class: power
    state_class: measurement
    on_value: 
      then:
        - number.set:
            id: gauge_control
            value: !lambda return x;
